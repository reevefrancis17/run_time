{
  "title": "Climbing Stairs",
  "tags": ["Math", "Dynamic Programming"],
  "difficulty": "Easy",
  "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? Example: Input: n = 2, Output: 2",
  "solution": [
    "def climb_stairs(n):",
    "    if n <= 2:",
    "        return n",
    "    dp = [0] * (n + 1)",
    "    dp[1], dp[2] = 1, 2",
    "    for i in range(3, n + 1):",
    "        dp[i] = dp[i-1] + dp[i-2]",
    "    return dp[n]"
  ],
  "questions": [
    {
      "lineIndex": 4,
      "question": "How do you initialize the base cases?",
      "options": ["    dp[1], dp[2] = 0, 1", "    dp[1], dp[2] = 1, 2", "    dp[1], dp[2] = 2, 1", "    dp[1], dp[2] = 1, 1"],
      "correctAnswerIndex": 1
    },
    {
      "lineIndex": 6,
      "question": "How do you calculate ways to reach step i?",
      "options": ["    dp[i] = dp[i-1] + dp[i-2]", "    dp[i] = dp[i-1] * dp[i-2]", "    dp[i] = dp[i-1] - dp[i-2]", "    dp[i] = max(dp[i-1], dp[i-2])"],
      "correctAnswerIndex": 0
    }
  ]
}